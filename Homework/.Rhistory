which1 <- which(ml100$rater == 1 )
which1
head(which1)
ml100[200:205,]
#using the which variable for ewasy access
ml100[which1,]
ml100{ml100$rater == 1, }
#taking out the intermediate step
ml100[ml100$rater == 1, ]
# IN OUR DATA FRAME, PER RATER, CALCULATE MEAN RATING
### tapply(), like sql group by
tmp <- tapply(ml100$rating, ml100$rater, mean)
# IN OUR DATA FRAME, PER RATER, CALCULATE MEAN RATING
tmp
# IN OUR DATA FRAME, PER RATER, CALCULATE MEAN RATING
tmp[1:10]
tmp <- tapply(ml100$rater, ml100$rater, length)
### tapply(), like sql group by
tmp <- tapply(ml100$rating, ml100$rater, mean)
# IN OUR DATA FRAME, PER RATER, CALCULATE MEAN RATING
tmp[1:10]
tmp2 <- tapply(ml100$rater, ml100$rater, length)
tmp2
tmp2[1:10, ]
tmp2[1:10, ]
tmp2[1:10 ]
length(ml100[ml100 == 1,])
#not intended counts columns
length(ml100[ml100 == 1, 1])
#not intended counts columns
length(ml100[ml100$rater == 1, 1])
max(tmp)
#who?
tmp[tmp = max(tmp)]
#who?
tmp[tmp == max(tmp)]
#who was the harshest rater
tmp[tmp == min(tmp)]
### for loops, not recommmened, there is usally a faster easier way
for (i in 1:5) print(tmp[i])
#more than one line
for (i in 1:5) {
print(tmp[i])
}
# writing functions
testFunction <- function(x) print(x)
testFunction(2)
}
(j in cols)
onesToFives <- function(d, cols) {
for {
for(j in cols) {}
onesToFives <- function(d, cols) {
for(j in cols) {}
NArows <- which(d[, j] == 1)
d[NArows, j] <- 5
}
test <- onesToFives(ml100, c("rating"))
test
# split()
ratings <- split(ml100, ml100$rating)
ratings
length(ratings)
ratings$'1'
# using libraries and packages
remotes:: install_github("matloff/rectools")
library(remotes)
# using libraries and packages
install_github("matloff/rectools")
# using libraries and packages
install.packages("matloff/rectools")
gianni.master.20220104 <- read.csv("C:/Users/Gianni/Desktop/Github/Cudmore/SinusoidalRegress/gianni-master-20220104.csv")
View(gianni.master.20220104)
mydata
mydata
library(ggplot2)
mydata = gianni.master.20220104
mydata
ggplot(mydata, aes(x = peakPhase)) + geom_bar()
ggplot(mydata, aes(x = peakPhase)) + geom_histogram()
ggplot(mydata, aes(x = peakPhase)) + geom_scatter()
ggplot(mydata, aes(x = peakPhase)) + geom_scat()
ggplot(mydata, aes(x = peakPhase)) + geom_dotplot()
ggplot(mydata, aes(x = peakPhase)) + geom_point()
ggplot(mydata, aes(x = peakPhase, y = peak)) + geom_point()
ggplot(mydata, aes(x = peakPhase, y = sweep)) + geom_point()
index = 1:nrow(mydata)
index = 1:16
mydata$index = index
tapply(mydata$peakPhase, mydata$sweep, mean)
split(mydata, mydata$sweep)
ggplot(splitd$'0', aes(x = 1:16, y = peakPhase) + geom_point()
ggplot(splitd$'0', aes(x = 1:16, y = peakPhase) + geom_point()
splitd$'0'$index
library(ggplot2)
mydata = gianni.master.20220104
mydata
tapply(mydata$peakPhase, mydata$sweep, mean)
splitd = split(mydata, mydata$sweep)
index = 1:16
splitd$'0'$index
ggplot(splitd$'0', aes(x = , y = peakPhase) + geom_point()
ggplot(splitd$'0', aes(x = index, y = peakPhase) + geom_point()
library(ggplot2)
library(ggplot2)
mydata = gianni.master.20220104
mydata
tapply(mydata$peakPhase, mydata$sweep, mean)
splitd = split(mydata, mydata$sweep)
index = 1:16
splitd$'0'$index
ggplot(splitd$'0', aes(x = index, y = peakPhase) + geom_point()
ggplot(data0, aes(x = index, y = peakPhase) + geom_point()
library(ggplot2)
library(ggplot2)
mydata = gianni.master.20220104
mydata
tapply(mydata$peakPhase, mydata$sweep, mean)
splitd = split(mydata, mydata$sweep)
index = 1:16
data0 = splitd$'0'
data0$index = index
data0 = splitd$'0'[1:16]
data0_sub = data0[1:16, ]
ggplot(data0_sub, aes(x = index, y = peakPhase) + geom_point()
library(ggplot2)
library(ggplot2)
mydata = gianni.master.20220104
mydata
tapply(mydata$peakPhase, mydata$sweep, mean)
splitd = split(mydata, mydata$sweep)
index = 1:16
data0 = splitd$'0'
data0$index = index
library(ggplot2)
mydata = gianni.master.20220104
mydata
tapply(mydata$peakPhase, mydata$sweep, mean)
splitd = split(mydata, mydata$sweep)
index = 1:16
data0 = splitd$'0'
#data0$index = index
data0_sub = data0[1:16, ]
ggplot(data0_sub, aes(x = index, y = peakPhase) + geom_point()
View(data0_sub)
library(ggplot2)
mydata = gianni.master.20220104
mydata
tapply(mydata$peakPhase, mydata$sweep, mean)
splitd = split(mydata, mydata$sweep)
index = 1:16
data0 = splitd$'0'
#data0$index = index
data0_sub = data0[1:16, ]
ggplot(data0_sub, aes(x = index, y = peakPhase)) + geom_point()
ggplot(data0_sub, aes(x = index, y = peakPhase)) + geom_point() + geom_line()
plot 0.15967659611788615*sin(data0_sub)
plot 0.15967659611788615*sin(data0_sub)
library(ggplot2)
mydata = gianni.master.20220104
mydata
tapply(mydata$peakPhase, mydata$sweep, mean)
splitd = split(mydata, mydata$sweep)
index = 1:16
data0 = splitd$'0'
#data0$index = index
data0_sub = data0[1:16, ]
ggplot(data0_sub, aes(x = index, y = peakPhase)) + geom_point() + geom_line(aes(Estimated = y))
library(ggplot2)
mydata = gianni.master.20220104
mydata
tapply(mydata$peakPhase, mydata$sweep, mean)
splitd = split(mydata, mydata$sweep)
index = 1:16
data0 = splitd$'0'
#data0$index = index
data0_sub = data0[1:16, ]
#ggplot(data0_sub, aes(x = index, y = peakPhase)) + geom_point() + geom_line(aes(Estimated = y))
plot (0.15967659611788615*sin(data0_sub))
#ggplot(data0_sub, aes(x = index, y = peakPhase)) + geom_point() + geom_line(aes(Estimated = y))
plot (sin(data0_sub))
#ggplot(data0_sub, aes(x = index, y = peakPhase)) + geom_point() + geom_line(aes(Estimated = y))
plot (index, sin(data0_sub$peakPhase))
#ggplot(data0_sub, aes(x = index, y = peakPhase)) + geom_point() + geom_line(aes(Estimated = y))
plot (index, data0_sub$peakPhase)
#ggplot(data0_sub, aes(x = index, y = peakPhase)) + geom_point() + geom_line(aes(Estimated = y))
plot (index, data0_sub$peakPhase)
plot (index, y)
#ggplot(data0_sub, aes(x = index, y = peakPhase)) + geom_point() + geom_line(aes(Estimated = y))
y = sin(data0_sub$peakPhase)
plot (index, y)
plot (index, data0_sub$peakPhase)
source('C:/Users/Gianni/Desktop/Github/ecs-172-hw-group/homework/homework-01/make-homework-RData.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(ml100)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
load('Hwk1.RData')
load('Hwk1.RData')
View(ml100kpluscovs)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mean(ml100kpluscovs$whichGenres == 1)
mean(ml100kpluscovs$G2 == 1 & ml100kpluscovs$G5 == 1 & ml100kpluscovs$G18 == 1 &)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
lm
install_github('matloff/regtools')
install.github('matloff/regtools')
library(devtools)
install.packages("devtools")
library(devtools)
install_github('matloff/qeML')
install_github('matloff/regtools')
install_github('matloff/rectools')
library(qeML)
load('hwk1.Rdata')
library(qeML)
library(devtools)
install_github('matloff/qeML')
library(qeML)
install_github('matloff/regtools')
install_github('matloff/regtools', force = TRUE)
library(qeML)
qeLASSO(ml100kpluscovs[,c('userMean', 'itemMean', 'rating')], y)
y = ml100kpluscovs$rating
qeLASSO(ml100kpluscovs[,c('userMean', 'itemMean', 'rating')], y)
qeLASSO(ml100kpluscovs[,c('userMean', 'itemMean', 'rating')], 'rating')
qeLASSO(ml100kpluscovs[,c('userMean', 'itemMean', 'rating')], 'rating')$testAcc
qeLASSO(ml100kpluscovs[,c('userMean', 'itemMean', 'rating')], 'rating')$baseAcc
coef(z_select)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
print(corMat)
source('~/.active-rstudio-document', echo=TRUE)
# calculate a probability
#mean(corMat > accidentLevel)
}
simProbAccident <- function(p, n, rho, accidentLevel, nSamp)
{
simout <- replicate(nSamp,
{
v <- matrix(rnorm(p * n), ncol = p)
w <- matrix(nrow = n, ncol = p)
# generate correlated variables
x <- matrix(rnorm(p * n), ncol = p)
w <- rho * v + x
corMat <- cor(w)
# element i,j is rhoHat[i,j]
diag(corMat) <- 0
})
print(simout)
# calculate a probability
#mean(corMat > accidentLevel)
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(density(corMat))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
print(w)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
pcout
source('~/.active-rstudio-document', echo=TRUE)
pcout <- myPCA(mlbx)
pcout
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
diag(D)
source('~/.active-rstudio-document', echo=TRUE)
sqrt(diag(D)) # to get the sddev
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
#pcout
pcout$sdev
source('~/.active-rstudio-document', echo=TRUE)
return(list(sdev = x))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
return(list(sdev = U))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(plotly)
install.packages("plotly")
source('~/Github/ecs-172-hw-group/term-project/TermProject.R', echo=TRUE)
library(plotly)
steam.200k <-
read.csv("~/GitHub/ecs-172-hw-group/term-project/steam-200k.csv")
head(steam.200k)
tail(steam.200k)
sapply(steam.200k, class)
#Remove user id that is zero
steam.200k <- steam.200k[steam.200k$user.id != 0,]
WomenTrack <- read.csv("~/Github/STA135/Homework/HW1/National Track Records for Women.csv", header =  TRUE)
WomenTrack
WomenTrack
#First, convert last 4 columns into seconds
WomenTrack[,5:8] = WomenTrack[, 5:8] * 60
WomenTrack
#Second, divide each column by respective meters to get meters per second
meters = c(1, 100, 200, 400, 800, 1500, 3000, 42195)
for (i in 2:length(meters)){
WomenTrack[,i] <- meters[i]/ WomenTrack[,i]
}
WomenTrack
#mean vector
colMeans(WomenTrack[sapply(WomenTrack, is.numeric)])
#Sigma
n = nrow(WomenTrack)
cov(WomenTrack[,-1]) * (n-1/n)
#R
cor(WomenTrack[,-1])
#mean vector
colMeans(WomenTrack[sapply(WomenTrack, is.numeric)])
cov(WomenTrack[,-1]) * (n-1/n)
#R
cor(WomenTrack[,-1])
cat("$",expSemi, "million would be the expected net present value of expanding semiconductor business project")
#Expected value would be
expSemi <- 40 * 0.5 + 15*0.25 + 0.25 * -20
cat("$",expSemi, "million would be the expected net present value of expanding semiconductor business project")
varSemi <- (40 - expSemi)^2 + (15 - expSemi)^2 + (20 - expSemi)^2
varSemi
sdSemi <- sqrt(varSemi)
sdSemi
expHome <- 140 * 0.2 + 15*0.5 + 0.3 * -35
cat("$",expHome, "million would be the expected net present value of expanding semiconductor business project")
install.packages("KMsurv")
library(KMsurv)
##Times to Death for Patients with Cancer of the Tongue
##section 1.11 (page 12) in Klein & Moeschberger
data(tongue)
?tongue
tongue[10,]
#this patient had aneuploid tumor, 24 weeks from time of surgery to death
tongue[75,]
install.packages("asaur")
library(asaur)
#Channing House Data
#section 3.5 (page 39) in Moore
data(ChanningHouse)
?ChanningHouse
ChanningHouse[10,]
#this was a male resident, entered the house at 837 months, spent 108 months, died at 945 months
ChanningHouse[20,]
5 + 8 + 12 + 24 + 32 + 17
98 / 6
98/2
/3
49/3
16 + 17 + 19 + 30
11 + 12 + 15 + 45
33 + 28 + 16 + 17 + 19 + 30
33 + 28
83 + 61
144/4
36 * 3
setwd("~/Github/STA222/Homework")
nlist <- c(rep(10, 10))
nlist
nlist <- c(seq(10, 200, 10))
nlist
lapply(nlist, pgamma(q = 1,shape=30,rate=nlist*.25))
lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25))
list(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25)))
unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25))))
unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25)))
class(unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25))))
list(unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25))))
shape(list(unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25))))
shape(list(unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25)))))
shape((list(unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25)))))
unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25))))
unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25)))
lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25))
lapply(nlist, function(x) as.numeric((pgamma(q = 1,shape=30,rate=x*.25))
lapply(nlist, function(x) as.numeric((pgamma(q = 1,shape=30,rate=x*.25)))
lapply(nlist, function(x) as.numeric((pgamma(q = 1,shape=30,rate=x*.25)))
lapply(nlist, function(x) (pgamma(q = 1,shape=30,rate=x*.25))
lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25))
lapply(nlist, function(x) as.numeric(pgamma(q = 1,shape=30,rate=x*.25)))
lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25))
library(plotly)
gammadf <- data.frame(nlist, lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25)))
gammadf
gammadf <- data.frame(nlist, unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25))))
gammadf
names(gammadf) <- c("n", "Probability")
gammadf
fig <- plot_ly(data = gammadf, x = ~n, y = ~Probability)
fig
nlist <- c(seq(10, 200, 5))
nlist
nlist <- c(seq(10, 200, 5))
gammadf <- data.frame(nlist, unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25))))
names(gammadf) <- c("n", "Probability")
gammadf
fig <- plot_ly(data = gammadf, x = ~n, y = ~Probability)
fig
fig <- plot_ly(data = gammadf, x = ~n, y = ~Probability) %>% layout(title = "Estimating At Least 30 Failures with Gamma Distribution")
fig
where(nlist > 0.5)[1]
(nlist > 0.5)[1]
nlist[gammadf[,2] > 0.95]
nlist[gammadf[,2] > 0.95][1]
gammadf[,2][gammadf[,2] > 0.95,]
gammadf[,2][gammadf[,2] > 0.95,]
gammadf[,2]
gammadf[,2][gammadf[,2] > 0.95]
gammadf[,2][gammadf[,2] > 0.95][1]
fig <- plot_ly(data = gammadf, x = ~n, y = ~Probability) %>% layout(title = "Estimating At Least 30 Failures with Gamma Distribution") %>% add_trace(x = nlist[gammadf[,2] > 0.95][1], y =gammadf[,2][gammadf[,2] > 0.95][1])
fig
library(plotly)
fig <- plot_ly(data = gammadf, x = ~n, y = ~Probability) %>% layout(title = "Estimating At Least 30 Failures with Gamma Distribution")
fig <- fig %>% add_trace(x = nlist[gammadf[,2] > 0.95][1], y =gammadf[,2][gammadf[,2] > 0.95][1])
fig
#fig <- fig %>% add_trace(x = nlist[gammadf[,2] > 0.95][1], y =gammadf[,2][gammadf[,2] > 0.95][1])
fig
library(plotly)
fig <- plot_ly(data = gammadf, x = ~n, y = ~Probability) %>% layout(title = "Estimating At Least 30 Failures with Gamma Distribution")
#fig <- fig %>% add_trace(x = nlist[gammadf[,2] > 0.95][1], y =gammadf[,2][gammadf[,2] > 0.95][1])
fig
poisdf <- data.frame(nlist, unlist(lapply(nlist, function(x) qpois(0.95,x*.25*1,lower=F))))
names(poisdf) <- c("n", "Probability")
poisdf
qpois(0.95,n*.25*1,lower=F)
library(plotly)
fig <- plot_ly(data = gammadf, x = ~n, y = ~Probability) %>% layout(title = "Estimating Probability of At Least 30 Failures with Gamma Distribution")
#fig <- fig %>% add_trace(x = nlist[gammadf[,2] > 0.95][1], y =gammadf[,2][gammadf[,2] > 0.95][1])
fig
figPOIS <- plot_ly(data = poisdf, x = ~n, y = ~Failures) %>% layout(title = "Estimating At Least 30 Failures with Poission Distribution")
figPOIS
# We simulate using the Poisson
poisdf <- data.frame(nlist, unlist(lapply(nlist, function(x) qpois(0.95,x*.25*1,lower=F))))
names(poisdf) <- c("n", "Failures")
figPOIS <- plot_ly(data = poisdf, x = ~n, y = ~Failures) %>% layout(title = "Estimating At Least 30 Failures with Poission Distribution")
figPOIS
#fig <- fig %>% add_trace(x = nlist[gammadf[,2] > 0.95][1], y =gammadf[,2][gammadf[,2] > 0.95][1])
fig
```{r, echo = FALSE}
library(plotly)
```{r, echo = FALSE, eval = FALSE}
library(plotly)
```{r, message = FALSE}
library(plotly)
figGAMMA <- plot_ly(data = gammadf, x = ~n, y = ~Probability) %>% layout(title = "Estimating Probability of At Least 30 Failures with Gamma Distribution")
#fig <- fig %>% add_trace(x = nlist[gammadf[,2] > 0.95][1], y =gammadf[,2][gammadf[,2] > 0.95][1])
figGAMMA
figPOIS <- plot_ly(data = poisdf, x = ~n, y = ~Failures) %>% layout(title = "Estimating At Least 30 Failures with Poission Distribution")
figPOIS
```{r, message = FALSE}
figGAMMA <- plot_ly(data = gammadf, x = ~n, y = ~Probability) %>% layout(title = "Estimating Probability of At Least 30 Failures with Gamma Distribution")
#fig <- fig %>% add_trace(x = nlist[gammadf[,2] > 0.95][1], y =gammadf[,2][gammadf[,2] > 0.95][1])
figGAMMA
figPOIS <- plot_ly(data = poisdf, x = ~n, y = ~Failures) %>% layout(title = "Estimating At Least 30 Failures with Poission Distribution")
figPOIS
gammadf
seq(10, 200, 5)
?lapply
unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25))
unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25)))
unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25))))
unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25))
unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25))
unlist(lapply(nlist, function(x) pgamma(q = 1,shape=30,rate=x*.25)))
fig <- fig %>% add_trace(x = nlist[gammadf[,2] > 0.95][1], y =gammadf[,2][gammadf[,2] > 0.95][1])
figGAMMA <- plot_ly(data = gammadf, x = ~n, y = ~Probability) %>% layout(title = "Estimating Probability of At Least 30 Failures with Gamma Distribution")
fig <- fig %>% add_trace(x = nlist[gammadf[,2] > 0.95][1], y =gammadf[,2][gammadf[,2] > 0.95][1])
